import glob
import os
import ninja_syntax
import sys
import subprocess

dir_path = "src/"
asm_path = "asm/"
assets_path = "assets/"
build_dir = "build/"

opt_flag = "-O2"
compile_command = f"mips64-elf-gcc -D_LANGUAGE_C -Wall {opt_flag} -mtune=vr4300 -march=vr4300 -mabi=32 -fno-builtin -fomit-frame-pointer -G0 -c"

c_files = glob.glob(f"{dir_path}/**/*.c", recursive=True)
s_files = glob.glob(f"{asm_path}/**/*.s", recursive=True)
bin_files = glob.glob(f"{assets_path}/**/*.bin", recursive=True)

if not os.path.exists(build_dir):
	os.makedirs(build_dir)

if not os.path.exists("rom/bk.z64"):
	print("bk.z64 not found! Place a .z64 rom at rom/bk.z64")
	sys.exit()

"""
//Automatically generated by configure.py, do not edit
.n64 // Let armips know we're coding for the N64 architecture
.open "rom/bk.z64", "rom/bk.mod.z64", 0 // Open the ROM file
.include "asm/symbols.asm"
.close
"""

for c_file in c_files:
	# Use subprocess to run the command
	try:
		subprocess.run( f"{compile_command} {c_file}", shell=True, check=True)
		print(f"{c_file} compiled")
	except subprocess.CalledProcessError as e:
		print(f"Compilation failed with error code {e.returncode}")
		print(e.stderr)

